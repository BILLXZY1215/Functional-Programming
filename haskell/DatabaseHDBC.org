#+INCLUDE: ../theme/style.org
#+TITLE: Databases in Haskell - HDBC
#+DESCRIPTION: Databases in Haskell, database drivers 
#+KEYWORDS: haskell, database, drivers, hdbc, sqlite, postgres

* Databases - HDBC 
** Overview 

HDBC is a library that provides a common abstraction or interface to
different database engines like sqlite, mysql and postgres. The
communication to each database engine is handled by the database
driver.

*Documentation:*

| Haskell Database Connectivity library | [[https://hackage.haskell.org/package/HDBC-2.4.0.1/docs/Database-HDBC.html][Database.HDBC]]                           |
| Sqlite Driver                         | [[https://hackage.haskell.org/package/HDBC-sqlite3][HDBC-sqlite3: Sqlite v3 driver for HDBC]] |
| Postgresql Driver                     | [[https://hackage.haskell.org/package/HDBC-postgresql-2.3.2.4/docs/Database-HDBC-PostgreSQL.html][Database.HDBC.PostgreSQL]]                |
| MySQL Driver                          | [[https://hackage.haskell.org/package/HDBC-mysql][HDBC-mysql: MySQL driver for HDBC]]       |
|                                       |                                         |


*Getting a database to play*

#+BEGIN_SRC sh 
  # Download sample database dump 
  $ curl -L -o zotero.sql https://github.com/caiorss/zhserver/raw/master/database/zotero-test.sql

  $ du -h zotero.sql 
  3,0M    zotero.sql
  3,0M    total

  $ file zotero.sql 
  zotero.sql: UTF-8 Unicode text, with very long lines, with LF, NEL line terminators

  # Make the database 
  $ cat zotero.sql | sqlite3 zotero.sqlite

  # Check the file type 
  $ file zotero.sqlite 
  zotero.sqlite: SQLite 3.x database, last written using SQLite version 3016002

  sqlite> 
  sqlite> .tables
  annotations                itemNotes                
  baseFieldMappings          itemSeeAlso              
  baseFieldMappingsCombined  itemTags                 
  charsets                   itemTypeCreatorTypes     
  collectionItems            itemTypeFields           
  collections                itemTypeFieldsCombined   
  creatorData                itemTypes                
  creatorTypes               itemTypesCombined        
  creators                   items                    
  customBaseFieldMappings    libraries                
  customFields               proxies                  
  customItemTypeFields       proxyHosts               
  customItemTypes            relations            
     ... ... ... ... ...


  sqlite> .headers on
  sqlite> .mode column

     
  sqlite> SELECT * FROM tags LIMIT 10 ;
  tagID       name        type        dateAdded            dateModified         clientDateModified   libraryID   key       
  ----------  ----------  ----------  -------------------  -------------------  -------------------  ----------  ----------
  2           fp          0           2016-11-07 22:03:05  2017-02-08 20:10:06  2017-02-08 20:10:06              TCG4NFU2  
  3           fsharp      0           2016-11-07 22:03:09  2016-11-07 22:03:23  2016-11-07 22:03:23              ZWMIIEA9  
  4           doc         0           2016-11-07 22:03:11  2016-11-07 22:03:29  2016-11-07 22:03:29              B4SGSEZR  
  5           overview    0           2016-11-07 22:03:25  2016-11-07 22:03:25  2016-11-07 22:03:25              DP9WBHZJ  
  6           haskell     0           2016-11-07 22:03:44  2017-02-08 20:10:31  2017-02-08 20:10:31              FSZTVA3J  
  7           tutorial    0           2016-11-07 22:03:47  2016-11-07 22:03:47  2016-11-07 22:03:47              Z2KJVEKI  
  8           quickref    0           2016-11-07 22:06:24  2016-11-07 22:07:34  2016-11-07 22:07:34              P67M4AB5  
  9           linux       0           2016-11-07 22:06:26  2016-11-07 22:07:30  2016-11-07 22:07:30              JQR7943E  
  10          c++         0           2016-11-07 22:15:22  2017-02-08 20:09:44  2017-02-08 20:09:44              VG2ZRGWM  
  11          numerical   0           2016-11-07 22:20:56  2016-11-07 22:24:03  2016-11-07 22:24:03              P859CH9I  
  sqlite> 


  sqlite> SELECT * FROM collections LIMIT 10 ;
  collectionID  collectionName  parentCollectionID  dateAdded            dateModified         clientDateModified   libraryID   key       
  ------------  --------------  ------------------  -------------------  -------------------  -------------------  ----------  ----------
  2             Haskell                             2016-11-07 21:50:38  2016-11-07 23:13:55  2016-11-07 23:13:55              PMHEFIBA  
  3             Haskell doc     2                   2016-11-07 21:50:57  2016-11-07 21:51:18  2016-11-07 21:51:18              CCCGVG4V  
  5             Haskell Tutori  2                   2016-11-07 21:53:30  2016-11-07 21:54:32  2016-11-07 21:54:32              FRE2DHFB  
  6             Fsharp                              2016-11-07 21:59:56  2016-11-07 22:01:43  2016-11-07 22:01:43              BICWZD7P  
  7             Linux                               2016-11-07 22:05:05  2016-11-07 22:07:05  2016-11-07 22:07:05              TIWU5EPF  
  8             C++/CPP                             2016-11-07 22:11:57  2016-11-07 22:42:28  2016-11-07 22:42:28              42H6QC5D  
  sqlite>
#+END_SRC

** Install the Database Drivers 


#+BEGIN_SRC sh 
# Go outside a project 
$ cd ~

# Install database drivers 
$ stack install HDBC
$ stack install HDBC-sqlite3
$ stack install HDBC-postgresql

# Run Haskell REPL
$ stack ghci 
#+END_SRC

** Example

Connect to sqlite3 database 

#+BEGIN_SRC haskell 
  import Database.HDBC
  import Database.HDBC.Sqlite3 

  > conn <- connectSqlite3 "zotero.sqlite" 
  conn :: Connection
  > 
#+END_SRC

Database Metadata

#+BEGIN_SRC haskell 
  -- Driver name
  --
  > hdbcDriverName conn
  "sqlite3"
  it :: String
  > :t hdbcDriverName conn
  hdbcDriverName conn :: String
  > 


  -- Version of database server
  --
  > dbServerVer conn
  "3.14.1"
  it :: String
  > 

  > :t dbServerVer conn
  dbServerVer conn :: String
  > 

    
#+END_SRC

Tables metadata 

#+BEGIN_SRC haskell 
  > :t getTables 
  getTables :: IConnection conn => conn -> IO [String]
  > 

  > getTables conn 
  ["annotations","baseFieldMappings","baseFieldMappingsCombined","charsets", ...]


  -- Print all tables available 
  --
  > getTables conn >>= mapM_ putStrLn 
  annotations
  baseFieldMappings
  baseFieldMappingsCombined
  charsets
  collectionItems
  collections
  creatorData
  creatorTypes
  creators
  customBaseFieldMappings
  customFields
  customItemTypeFields
  customItemTypes
  deletedItems
  fieldFormats
  fields
  fieldsCombined
  fileTypeMimeType
  ...
  tags
  transactionLog
  transactionSets
  transactions
  translatorCache
  users
  version
  zoteroDummyTable


  -- Show specific table metadata  
  --
  --
  > describeTable conn "tags"
  [("tagID",SqlColDesc {colType = SqlIntegerT, colSize = Nothing,
  colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})...]

  > describeTable conn "tags" >>= mapM_ print

  ("tagID",SqlColDesc {colType = SqlIntegerT, colSize = Nothing, colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})
  ("name",SqlColDesc {colType = SqlVarCharT, colSize = Nothing, colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})
  ("type",SqlColDesc {colType = SqlIntegerT, colSize = Nothing, colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})
  ("dateAdded",SqlColDesc {colType = SqlUnknownT "timestamp", colSize = Nothing, colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})
  ("dateModified",SqlColDesc {colType = SqlUnknownT "timestamp", colSize = Nothing, colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})
  ("clientDateModified",SqlColDesc {colType = SqlUnknownT "timestamp", colSize = Nothing, colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})
  ("libraryID",SqlColDesc {colType = SqlIntegerT, colSize = Nothing, colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})
  ("key",SqlColDesc {colType = SqlVarCharT, colSize = Nothing, colOctetLength = Nothing, colDecDigits = Nothing, colNullable = Nothing})
  it :: ()
  > 
    
#+END_SRC



Quick query 

#+BEGIN_SRC haskell 
  > :t quickQuery
  quickQuery
    :: IConnection conn =>
       conn -> String -> [SqlValue] -> IO [[SqlValue]]
  >


  -- Output: formatted manually in order to fit in the screen. 
  --
  --
  > quickQuery conn "SELECT tagID, name FROM tags WHERE tagID > 80 LIMIT 15" []

  [[SqlInt64 81,SqlByteString "excel"],
   [SqlInt64 82,SqlByteString "spreadsheet"],
   [SqlInt64 83,SqlByteString "vba"],
   [SqlInt64 84,SqlByteString "code"],
   [SqlInt64 85,SqlByteString "thermodynamics"],
   [SqlInt64 86,SqlByteString "mechanical"],
   [SqlInt64 87,SqlByteString "energy"],
   [SqlInt64 88,SqlByteString "catalog"],
   [SqlInt64 89,SqlByteString "parts"],
   [SqlInt64 90,SqlByteString "MVC"],
   [SqlInt64 91,SqlByteString "hydraulics"],
   [SqlInt64 92,SqlByteString "manufacturer"],
   [SqlInt64 93,SqlByteString "design"],
   [SqlInt64 94,SqlByteString "manual"],
   [SqlInt64 95,SqlByteString "cable"]]
  it :: [[SqlValue]]


  > quickQuery conn "SELECT tagID, name FROM tags WHERE tagID > 80 LIMIT 15" [] >>= mapM_ print
  [SqlInt64 81,SqlByteString "excel"]
  [SqlInt64 82,SqlByteString "spreadsheet"]
  [SqlInt64 83,SqlByteString "vba"]
  [SqlInt64 84,SqlByteString "code"]
  [SqlInt64 85,SqlByteString "thermodynamics"]
  [SqlInt64 86,SqlByteString "mechanical"]
  [SqlInt64 87,SqlByteString "energy"]
  [SqlInt64 88,SqlByteString "catalog"]
  [SqlInt64 89,SqlByteString "parts"]
  [SqlInt64 90,SqlByteString "MVC"]
  [SqlInt64 91,SqlByteString "hydraulics"]
  [SqlInt64 92,SqlByteString "manufacturer"]
  [SqlInt64 93,SqlByteString "design"]
  [SqlInt64 94,SqlByteString "manual"]
  [SqlInt64 95,SqlByteString "cable"]
  it :: ()
  > 

    
#+END_SRC


Query

#+BEGIN_SRC haskell 


  let query = unlines $ [
        "SELECT fieldName, value FROM itemDataValues, itemData, fields WHERE", 
        "itemDataValues.valueID = itemData.valueID", 
        "and itemData.itemID = 5805",
        "and fields.fieldID = itemData.fieldID"
        ]

  > putStrLn query 
  SELECT fieldName, value FROM itemDataValues, itemData, fields WHERE
  itemDataValues.valueID = itemData.valueID
  and itemData.itemID = 5805
  and fields.fieldID = itemData.fieldID

  it :: ()
  > 

  > :t prepare 
  prepare :: IConnection conn => conn -> String -> IO Statement
  > 

  > stmt <- prepare conn query 
  stmt :: Statement
  > 

  > 
  > :t stmt 
  stmt :: Statement
  > 


  > :t execute
  execute :: Statement -> [SqlValue] -> IO Integer
  > 
  > nrows <- execute stmt []
  nrows :: Integer
  > nrows
  0
  it :: Integer
  > 

  > getColumnNames stmt
  ["fieldName","value"]
  it :: [String]
  > 
    
  -- ========= fetchAllRows =============== -
   
    
  > rows <- fetchAllRows stmt -- Output changed to fit on the screen.
  rows :: [[SqlValue]]
  > rows
  [[SqlByteString "url",SqlByteString "http://www.eliza.ch/doc/wadler92essence_of_FP.pdf"]
    ,[SqlByteString "place",SqlByteString "Albuquerque, NM, USA"],
     [SqlByteString "publisher",SqlByteString "ACM"],
     [SqlByteString "pages",SqlByteString "1-14"],
     [SqlByteString "date",SqlByteString "1992-00-00 1992"],
     [SqlByteString "DOI",SqlByteString "10.1145/143165.143169"],
     [SqlByteString "accessDate",SqlByteString "2016-04-04 20:05:57"],
     [SqlByteString "language",SqlByteString "en"],
     [SqlByteString "title",SqlByteString "The essence of functional programming"],
     [SqlByteString "proceedingsTitle",SqlByteString "POPL '92 Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages"]]
  it :: [[SqlValue]]

  > 
  > mapM_ print rows
  [SqlByteString "url",SqlByteString "http://www.eliza.ch/doc/wadler92essence_of_FP.pdf"]
  [SqlByteString "place",SqlByteString "Albuquerque, NM, USA"]
  [SqlByteString "publisher",SqlByteString "ACM"]
  [SqlByteString "pages",SqlByteString "1-14"]
  [SqlByteString "date",SqlByteString "1992-00-00 1992"]
  [SqlByteString "DOI",SqlByteString "10.1145/143165.143169"]
  [SqlByteString "accessDate",SqlByteString "2016-04-04 20:05:57"]
  [SqlByteString "language",SqlByteString "en"]
  [SqlByteString "title",SqlByteString "The essence of functional programming"]
  [SqlByteString "proceedingsTitle",SqlByteString "POPL '92 Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages"]
  it :: ()
  > 

  > let sqlRowToString = map (fromSql :: SqlValue -> String)
  - 
  sqlRowToString :: [SqlValue] -> [String]
  > 
  > mapM_ print $ map sqlRowToString rows 
  ["url","http://www.eliza.ch/doc/wadler92essence_of_FP.pdf"]
  ["place","Albuquerque, NM, USA"]
  ["publisher","ACM"]
  ["pages","1-14"]
  ["date","1992-00-00 1992"]
  ["DOI","10.1145/143165.143169"]
  ["accessDate","2016-04-04 20:05:57"]
  ["language","en"]
  ["title","The essence of functional programming"]
  ["proceedingsTitle","POPL '92 Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages"]
  it :: ()
  > 

  > let sqlRowToLine row = unwords $ map (fromSql :: SqlValue -> String) row
  - 
  sqlRowToLine :: [SqlValue] -> String
  >

  > mapM_ putStrLn $ map sqlRowToLine rows 
  url http://www.eliza.ch/doc/wadler92essence_of_FP.pdf
  place Albuquerque, NM, USA
  publisher ACM
  pages 1-14
  date 1992-00-00 1992
  DOI 10.1145/143165.143169
  accessDate 2016-04-04 20:05:57
  language en
  title The essence of functional programming
  proceedingsTitle POPL '92 Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages
  it :: ()
  > 
  > 
    
    
  > fetchAllRows stmt 
  []
  it :: [[SqlValue]]
  > 


  -- ================  fetchAllRowsAL  ======================= ---
    
  > stmt <- prepare conn query 
  stmt :: Statement

  > execute stmt []
  0
  it :: Integer
  > 

  > 
  > rows <- fetchAllRowsAL stmt
  rows :: [[(String, SqlValue)]]

  > mapM_ print rows
  [("fieldName",SqlByteString "url"),("value",SqlByteString "http://www.eliza.ch/doc/wadler92essence_of_FP.pdf")]
  [("fieldName",SqlByteString "place"),("value",SqlByteString "Albuquerque, NM, USA")]
  [("fieldName",SqlByteString "publisher"),("value",SqlByteString "ACM")]
  [("fieldName",SqlByteString "pages"),("value",SqlByteString "1-14")]
  [("fieldName",SqlByteString "date"),("value",SqlByteString "1992-00-00 1992")]
  [("fieldName",SqlByteString "DOI"),("value",SqlByteString "10.1145/143165.143169")]
  [("fieldName",SqlByteString "accessDate"),("value",SqlByteString "2016-04-04 20:05:57")]
  [("fieldName",SqlByteString "language"),("value",SqlByteString "en")]
  [("fieldName",SqlByteString "title"),("value",SqlByteString "The essence of functional programming")]
  [("fieldName",SqlByteString "proceedingsTitle"),("value",SqlByteString "POPL '92 Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages")]
  it :: ()
  > 

  -- =============== fetchAllRowsMap ================== --

  > stmt <- prepare conn query 
  stmt :: Statement

  > execute stmt []
  0

  > rows <- fetchAllRowsMap stmt
  rows :: [containers-0.5.7.1:Data.Map.Base.Map String SqlValue]
  > 
  > mapM_ print rows
  fromList [("fieldName",SqlByteString "url"),("value",SqlByteString "http://www.eliza.ch/doc/wadler92essence_of_FP.pdf")]
  fromList [("fieldName",SqlByteString "place"),("value",SqlByteString "Albuquerque, NM, USA")]
  fromList [("fieldName",SqlByteString "publisher"),("value",SqlByteString "ACM")]
  fromList [("fieldName",SqlByteString "pages"),("value",SqlByteString "1-14")]
  fromList [("fieldName",SqlByteString "date"),("value",SqlByteString "1992-00-00 1992")]
  fromList [("fieldName",SqlByteString "DOI"),("value",SqlByteString "10.1145/143165.143169")]
  fromList [("fieldName",SqlByteString "accessDate"),("value",SqlByteString "2016-04-04 20:05:57")]
  fromList [("fieldName",SqlByteString "language"),("value",SqlByteString "en")]
  fromList [("fieldName",SqlByteString "title"),("value",SqlByteString "The essence of functional programming")]
  fromList [("fieldName",SqlByteString "proceedingsTitle"),("value",SqlByteString "POPL '92 Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages")]
  it :: ()
  > 
    


#+END_SRC


Query Item by ID 

#+BEGIN_SRC haskell 


  :{
  queryItemByID ::  IConnection conn => Int -> conn -> IO [[SqlValue]]
  queryItemByID itemID conn = do
    stmt <- prepare conn query
    execute stmt [toSql itemID]
    rows <- fetchAllRows stmt 
    return rows 
    where
      query = unlines $ [ "SELECT fieldName, value FROM itemDataValues, itemData, fields WHERE", 
                          "itemDataValues.valueID = itemData.valueID", 
                          "and itemData.itemID = ?",
                          "and fields.fieldID = itemData.fieldID"
                        ]
  :}

  queryItemByID :: IConnection conn => Int -> conn -> IO [[SqlValue]]

  > queryItemByID 5569 conn >>= mapM_ print
  [SqlByteString "title",SqlByteString "From Stochastic Calculus to Mathematical Finance-Kabanov.pdf"]
  it :: ()
  > 

  > queryItemByID 5790 conn >>= mapM_ print
  [SqlByteString "url",SqlByteString "http://twanvl.nl/blog/haskell/building-pipes-with-monad-transformers"]
  [SqlByteString "accessDate",SqlByteString "2016-04-04 16:45:25"]
  [SqlByteString "title",SqlByteString "Building pipes with monad transformers"]
  it :: ()
  > 

  > queryItemByID 5805 conn >>= mapM_ print
  [SqlByteString "url",SqlByteString "http://www.eliza.ch/doc/wadler92essence_of_FP.pdf"]
  [SqlByteString "place",SqlByteString "Albuquerque, NM, USA"]
  [SqlByteString "publisher",SqlByteString "ACM"]
  [SqlByteString "pages",SqlByteString "1-14"]
  [SqlByteString "date",SqlByteString "1992-00-00 1992"]
  [SqlByteString "DOI",SqlByteString "10.1145/143165.143169"]
  [SqlByteString "accessDate",SqlByteString "2016-04-04 20:05:57"]
  [SqlByteString "language",SqlByteString "en"]
  [SqlByteString "title",SqlByteString "The essence of functional programming"]
  [SqlByteString "proceedingsTitle",SqlByteString "POPL '92 Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages"]
  it :: ()
  > 

    
#+END_SRC


Disconnect 

#+BEGIN_SRC haskell 
  > :t disconnect 
  disconnect :: IConnection conn => conn -> IO ()
  > 

  > disconnect conn
  it :: ()
  >   
#+END_SRC


 


